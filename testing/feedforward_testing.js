const dataTraining = [
     //distokia
     [0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
     [1,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,0], 
     //miasis
     [1,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0],
     [0,0,0,0,1,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0, 0,1,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
     [0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0],
     [0,1,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    // cacingan
    [1,0,0,0,1,1,1,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [0,0,0,0,1,1,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,1, 0,0,1,1,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [0,0,0,0,1,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [0,0,0,0,1,0,0,0,0,0, 0,0,0,1,0,0,0,0,0,0, 0,0,0,1,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [1,0,0,0,1,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [1,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,1,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [0,0,0,0,1,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [0,0,0,0,1,0,0,0,0,0, 0,0,1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [0,0,0,0,0,1,0,0,0,0, 0,0,1,0,0,0,0,0,0,0, 0,1,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [1,0,0,0,1,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    //endormeritis
    [1,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0], 
    [0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [1,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [1,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [1,0,0,1,0,0,1,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [1,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,1, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [1,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [1,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 1,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
    [1,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0],
     // DBD         
    //  [0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
    //  [1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    //  [0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0],
    //  [0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0],
    //  [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
    //  [1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  // MALARIA 
    //  [0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
    //  [1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    //  [0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0],
    //  [0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0],
    //  [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
    //  [1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    //  [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
    //  [1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0]
]

const solusi = [     
5,0.8427099602552293,2.7693485290633038,1.7346411695568356,0.030285099941301574,-1.0995936931170875,-5,5,5,5,-5,-5,-1.5799826997443125,3.036386373890562,0.059011809893914524,1.2108886116455628,-0.5162709689144984,4.073034070704061,-3.468039475792345,-0.3583757765124509,-5,4.895856225631506,0.6835029247954258,-5,-5,-3.400657564249695,-5,-5,5,4.034980820367613,3.992085265546858,-5,5,-5,5,5,5,-4.397457595312461,5,4.867412517185965,5,-0.5867822195268904,-0.552549572200498,-0.46603464958862073,0.4177175745123374,-5,5,5,5,-5,5,4.226939369550473,5,3.3463861052158026,-5,5,1.4307612271114039,5,5,5,5,-5,-2.268608863690379,0.2798089802320538,5,-1.0906399201297465,5,5,-4.800794997203329,-3.2876340093434444,5,-5,1.519133015650615,5,-5,0.0020011534388642005,0.5313875919100051,5,-1.118605917075854,2.5317368070113533,1.9888711984036753,5,-3.449077246550698,5,-5,5,5,-0.017133879373083083,-1.189787179707666,4.622110064515398,5,-5,5,-4.127384601408441,-2.566535828562713,-1.8862236288104564,-1.2852694727894542,-3.5384418205139156,-4.01639195255834,-3.6568563771697784,-5,5,5,2.3578609251060945,-5,4.914797418855496,-5,-5,-3.5280706511474396,-5,5,-5,0.010007742595433022,5,-0.658945842880394,5,1.1068364751038016,5,-5,5,4.926527311826488,5,5,-0.6778704645315257,-5,-5,-5,2.8394801633304105,5,-5,0.0012665587606184303,-5,3.4408874435523638,-5,5,-5,-4.2518496560912595,3.68791460204933,-5,-2.9801240735621533,3.1752278360986095,5,-5,2.7114767749213153,-5,-5,-5,0.3162013423672785,-5,-2.5181255588882494,-5,-1.5261576037810172,1.6903887238340944,5,5,5,-0.1194089134192744,-5,-0.7086667071834842,-5,-5,4.448962184151702,4.78352467572023,-5,-5,-5,0.7529865496526635,-5,5,5,5,1.4830827735591061,5,0.47881495514340955,5,5,3.8410967932931976,5,5,-5,-4.688388531330062,4.038942608514121,0.05204067265066836,5,1.6686272453322255,-5,-5,5,5,5,0.1828416163091635,5,5,5,-0.5535969980678539,0.5327426757898968,1.073468593142858,4.484385188073211,4.529627472598681,-5,-5,5,-5,5,-0.07213937668657078,1.4200192996467784,-5,-5,-5,5,5,5,-2.2571918218909834,2.472244927421306,-5,-5,-0.034451266444901485,-1.133391982321486,-0.030732160545599463,0.00015448410657903366,-1.5220029166556048,-4.59111043824342,-5,-5,-5,5,-0.2469604346317773,3.956971896439887,3.7958735718273813,5,5,5,-5,-0.6399290496632437,5,-3.5044001712952104,5,-1.433561049646145,5,0.011481052651512336,0.4983878806761206,-5,-5,-5,5,4.778278809109707,5,5,-5,5,1.0420331085428067,-1.9649903683994698,-0.8861931434966506,-0.04181633494438852,-5,2.338293690024093,2.7110769725189314,-5,-2.2599681495684623,-0.027409475321301002,-4.722601694135138,0.0044647411289195915,5,0.5968501421786181,5,-2.2250264773669395,-5,-4.753858995866574,-5,1.9257236044086792,2.973297569366959,-5,-5,2.5449858851022227,-0.19880460828891167,5,5,5,5,5,3.198422308171715,-5,5,-0.06936505322585429,-0.9141475036657871,-4.963959706928219,-5,4.349957512442499,-5,4.1088267343490745,5,5,-4.088068709046038,0.06326051328738647,5,-1.0747052740927598,1.050687078396698,5,-5,-3.9100870670474532,-5,5,-1.3635002934524632,-0.26560035750026945,0.44235144370350943,2.8738492928520554,-4.015589136201443,-5,-3.594766392674955,2.8456124356203403,5,-5,5,5,-0.8899936573523766,5,-5,5,2.3129543730086666,-2.8007744583704692,5,-5,5,4.572752021171043,0.6708375146778098,-1.4884831647159462,0.15824304598622607,3.078057059536932,-4.9757966785177565,-0.4031435613252494,-5,-0.0672208138530932,5,-5,5,-5,-1.0604565504692647,-5,-2.8722824756975682,5,-0.05022406419294789,-5,-5,-5,5,1.0132013282459442,4.006587202250205,-0.02084641907579332,2.7426561809450605,5,-0.5881746907430818,5,5,1.5952257272929802,0.020922683821932075,0.2183052783301349,1.1650217314026632,-5,-5,5,1.5393576002150815,-5,-5,2.043108192105856,1.1637486692633559,-2.3976233506855213,-4.0403968049852725,-1.9901915595081463,2.412485870921833,-5,0.3869515568728943,5,5,-5,5,-3.6609250875709085,-3.825189005685332,0.030617187741478702,5,-3.5693555916975237,-4.022456161864121,-5,2.5368184601198305,5,5,-5,5,2.127161589655983,1.2907476484120373,5,-5,-5,5,-0.8039990018229415,5,0.8683525104038798,5,-5,0.026497236693834303,2.736735735266892,5,-5,5,0.23344169684730076,-5,-1.909294006544997,-0.8908808129879735,-3.5659639770643325,4.073342909487728,5,-5,5,5,-2.579858066867915,5,5,5,-1.5729156444154944,5,-1.5426496427213237,-0.7926770547521236,-5,5,4.073994137144343,2.418283951766056,-5,3.5485173473421803,-0.446675552499987,2.7981733374163147,5,-5,-5,5,0.1709553884843018,-2.885949658669401,-4.944814272894794,4.435547624060806,0.038762271293390604,3.719536985576894,5,-5,-0.6334399746125579,5,5,-5,-5,5,-5,-2.4986222763552957,2.524416471950005,0.24581715958945605,5,-5,4.061202567729017,5,-0.074504805763973,-5,-5,5,-5,0.01286558083362177,-5,-5,0.6750168776922383,-5,-5,-1.1884804244640588,-5,-5,-1.252318132599962,4.704325841228365,5,5,4.358869539569158,5,5,-5,-3.2080082517521284,5,-4.099402759612303,-3.123154001447393,5,-0.9169290397268974,-5,-5,5,5,5,5,5,5,5,-1.77426879240894,5,0.4326865229970376,5,-5,4.034723488100144,2.011883714065641,3.1266702174053456,2.565720342315239,-5,-5,-5,5,5,5,5,-0.2781280899950498,5,-5,-5,-1.4877893871607681,3.5784722646286635,-2.0711745976901517,-5,5,-3.0503679064536673,2.5508911263413636,-5,4.778451328402957,2.9867032603876726,-5,-5,-0.8403697449271184,5,-5,-5,-1.9693683640445725,5,5,-5,-5,-5,-3.9711605482533354,-5,-5,5,5,5,-5,5,2.174750771526046,0.08076003855665626,5,5,-0.3857785954099482,2.7131937204494445,0.010278891614291297,3.2657909902353945,5,5,-5,5,-5,3.1002014538848934,-4.933782378733313,5,3.506844782035122,-5,0.04883622188098791,-0.6875853389359232,-5,-5,-5,5,5,5,-2.7624154977445987,1.6057044058079262,0.007624048810206396,-0.06915264139686084,5,5,5,2.7743295569468254,-5,-5,-4.648690792700237,-0.4938235127628827,-0.5422599669799535,5,5,5,3.9106002079958166,-5,-0.04209566361481176,5,1.4246803150391023,2.09976662543113,-0.23424652826364412,4.020935623057336,5,-5,5,5,-2.537811054829178,-1.3358844560690089,5,0.565710179386385,5,5,-5,-0.09548828258465036,5,5,-5,5,-5,5,-5,-5,5,5,-5,3.161297658872941,5,3.4901300384292533,-3.5316160225785262,-4.555518213436165,5,5,-4.784478961287027,-1.8297473413403265,-0.45907878587796436,-5,1.8498185890565262,5,5,5,2.762948270916538,-2.430614310009795,-5,-5,-5,-5,-5,4.70328063297322,-5,-0.23886212402368656,5,4.461855056644271,4.379824945512124,5,5,5,-5,5,5,5,-5,-0.891292626430018,-5,4.785738724458465,-5,2.2928278927577526,5,-5,-1.9997609120784587,-5,5,-4.1817972093407745,5,-4.162020925336771,-5,-0.18582828616089353,3.2885282607024546,-2.0278853477246868,-3.714675162436719,5,-5,2.841936332225195,-2.062126753783659,-5,-5,-2.1478599431642382,-5,-1.8604366985714185,-5,-5,2.1404323634517612,5,5,-1.838695411306483,-5,1.9505758169255167,0.2597438827951919,-5,3.99608020584131,-5,5,5,-5,5,-0.8789619727063207,-2.214380179054428,-5,-5,-5,-0.9453314129012684,-4.437076472927274
];

//fungsi sigmoid
function sigmoid(x) {
    return 1 / (1 + Math.exp(-x));
}



function Fun(data, solusi, hidden, output) {
    // console.log('------------------------INISIALISASI PARAMETER------------------------')
    let _solution = solusi;
    let _dtTraining = data;
    const _bias = 1;
    const _input = _dtTraining.length; //mendapatkan nilai jumlah nilai inputan dalam data training
    const _hidden = hidden;
    const _output = output;
    
    // langkah 1, inisialisasi parameter pada input layer ke hidden layer
    // kemudian jumlah input layer * hidden layer + bias to hidden layer
    const _biasToHidden = _bias * _hidden;
    const _inputToHidden = _input * _hidden;
    const _inputAndBiasToHidden = _biasToHidden + _inputToHidden;
    
    // langkah 2, inisialisasi parameter pada hidden layer ke output layer
    // kemudian jumlah hidden layer * output layer + bias to hidden layer
    const _biasToOuput = _bias * _output;
    const _hiddenToOutput = _hidden * _output;
    const _hiddenAndBiasToOuput = _biasToOuput + _hiddenToOutput;
    const dimension = _solution.length;
    // console.log(`jumlah dimensi = ${dimension}`)
    
    // total variabel solusi pada input dan bias ke hidden layer
    let _total_vsLayerOne = _solution.length - _hiddenAndBiasToOuput; //total input dan bias ke hidden layer
    // console.log(`total variabel solusi pada input dan bias ke hidden = ${_total_vsLayerOne}`)

    // mendapatkan vektor solusi dari layer bagian pertama ke hidden layer
    let _vsLayerOne = []; //simpan vektor solusi sementara
    for (let i = 0; i < _total_vsLayerOne; i++) {
        _vsLayerOne.push(_solution[i]);
    }
    // console.log(_solution)
    // console.log(`variabel solusi 1 = ${_vsLayerOne}`)
    // console.log(`variabel solusi 1 = `)
    // console.log(_vsLayerOne);
    
    // pisahkan terlebih dahulu bias ke hidden
    // sisa dari _vsLayerOne merupakan variabel solusi dari input ke hidden layer
    // let _biasToHidden = _total_vsLayerOne - _inputToHidden; //jumlah bias ke hidden layer == _biasToHidden
    // vektor solusi input layer ke hidden layer
    let _vs_inputToHidden = getInputWeight(_solution.slice(_biasToHidden, _total_vsLayerOne), _input); //vektor solusi input ke hidden
    // console.log(`variabel solusi input ke hidden = ${_vs_inputToHidden}`)
    
    //================================================================
    // membagi vektor solusi layer pertama dan kedua
    let _vsLayerTwo = _solution.slice(_total_vsLayerOne);
    // console.log(`variabel solusi 2 = ${_vsLayerTwo}`)
    // console.log(`nilai vs 2 = ${_vsLayerTwo}`)
    let _total_vs_biasToOutput = dimension - _inputAndBiasToHidden - _hiddenToOutput; //jumlah vektor solusi hidden ke output layer
    // console.log(`total variabel solusi bias ke output = ${_total_vs_biasToOutput} `)
    //memisahkan vektor solusi bias dan hidden layer dan
    //simpan vektor solusi bias ke dalam variabel
    let _vs_biasToOutput = [];
    for (let i = 0; i < _total_vs_biasToOutput; i++){
        _vs_biasToOutput.push(_vsLayerTwo[i]) // vektor solusi bias ke output layer
    }
    // console.log(`nilai variabel solusi 2 = ${_vs_biasToOutput}`)
    let _vs_hiddenToOutput = getInputWeight(_solution.slice(_total_vsLayerOne + _total_vs_biasToOutput, solusi.length), hidden); // vektor solusi  hidden ke output
    // console.log(`variabel solusi hidden to output = ${_vs_hiddenToOutput}`)
    let outputFeedForward = feedforward(hidden, data, _vsLayerOne, _vs_inputToHidden, output, _vsLayerTwo, _vs_hiddenToOutput)    
    // asdas
    return outputFeedForward;
}

function feedforward(hiddenLayer, data, vektorSolusi1, vektorSolusiInputToHidden, outputLayer, vektorSolusi2, vektorSolusiHiddenToOutput){
    // menghitung nilai fungsi aktivasi pada input layer ke hidden layer
    // console.log(`=============================FeedFoward=============================`)
    // console.log(`jumlah hidden layer = ${hiddenLayer}`)
    // console.log(vektorSolusi1)
    // console.log(vektorSolusiInputToHidden)
    // console.log(`data = ${data}`)
    // console.log(`panjang data = ${data.length}`)
    let _z_in = []
    for (let i = 0; i < hiddenLayer; i++){
        // console.log(`\nhidden layer ${i+1}`)
        let activation1 = vektorSolusi1[i]
        // console.log(`nilai bias ${i+1} = ${activation1}`)
        for (let j = 0; j < data.length; j++){
            // console.log(activation1)
            // console.log(`nilai data[${j+1}] = ${data[j]}`)
            // console.log(`vektor solusi input to hidden = ${vektorSolusiInputToHidden[i][j]} `)
            activation1 += data[j] * vektorSolusiInputToHidden[i][j]
        }
        // console.log(activation1)
        let sigmoidHidden = sigmoid(activation1)
        // console.log(sigmoidHidden);
        _z_in.push(sigmoidHidden);
        // console.log(activation1)
    }
    // console.log(_z_in)
    // console.log(outputLayer)
    // console.log(vektorSolusi2)
    // menghitung nilai fungsi aktivasi pada hidden layer ke output layer
    let _z = []; // menampung nilai aktivasi dari hidden ke output layer
    for (let i = 0; i < outputLayer; i++){
        // console.log(`nilai aktivasi pada hidden = ${_z_in}`)
        // console.log(`\n\nnilai pada output ${i+1}`)
        let activation2 = vektorSolusi2[i]
        // console.log(`nilai bias ${i+1} = ${vektorSolusi2[i]}`)
        for (let j = 0; j < _z_in.length; j++){ 
            // console.log(`nilai _z ${j+1} = ${_z_in[j]}`)
            // console.log(`nilai vektor solusi hidden to output = ${vektorSolusiHiddenToOutput[i][j]}`)
            activation2 += _z_in[j] * vektorSolusiHiddenToOutput[i][j]
        }
        let sigmoidOutput = sigmoid(activation2)
        // console.log(`nilai sigmoid output ${sigmoidOutput}`)
        _z.push(sigmoidOutput)
    }
    // console.log(`nilai y Feed Forward = ${_z}`)
    return _z;
}


function getInputWeight(data, size) {
    let result = [];
    for (let i = 0; i < data.length; i += size) {
        let subArray = [];
        for (let j = 0; j < size; j++) {
            if (i + j < data.length){
                subArray.push(data[i + j]);
            }
        }
        result.push(subArray);
    }
    return result;
}


function testing (){   
    
    for (let i = 0; i < dataTraining.length; i++){
        // console.log(`data ${i+1}`)
        // console.log(dataTraining[i])
        const hasil_testing = Fun(dataTraining[i], solusi, 10, 1);
        for (let j = 0; j < hasil_testing.length; j++) {
            if (hasil_testing[j] >= 0.5){
                // console.log(1);
                console.log(`data ${i+1} = ${hasil_testing} ||| 1`);
            } else {
                // console.log(0);
                console.log(`data ${i+1} = ${hasil_testing} ||| 0`);
            }
        }
    }
}
const test = testing();
console.log(test);
